{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { of } from 'rxjs';\nimport { catchError, map, startWith } from 'rxjs/operators';\nimport { DataStateEnum } from '../../State/product.state';\nlet ProductsComponent = class ProductsComponent {\n  constructor(productService, router) {\n    this.productService = productService;\n    this.router = router;\n    this.productsAncien = null;\n    this.productsbeforePipe$ = null;\n    this.products$ = null;\n    this.DataStateEnum = DataStateEnum;\n  }\n\n  ngOnInit() {} // tslint:disable-next-line:typedef\n\n\n  onGetAllProductsAncien() {\n    this.productService.getAllProducts().subscribe(data => {\n      this.productsAncien = data;\n    }, error => console.log(error));\n  } // tslint:disable-next-line:typedef\n\n\n  onGetAllProductsBeforePipe() {\n    this.productsbeforePipe$ = this.productService.getAllProducts();\n  } // tslint:disable-next-line:typedef\n\n\n  onGetAllProducts() {\n    // @ts-ignore\n    this.products$ = this.productService.getAllProducts().pipe(map(data => {\n      return {\n        dataState: DataStateEnum.LOADED,\n        data\n      };\n    }), startWith({\n      dataState: DataStateEnum.LOADING\n    }), catchError(err => of({\n      dataState: DataStateEnum.ERROR,\n      errorMessage: err.message\n    })));\n  } // tslint:disable-next-line:typedef\n\n\n  onGetSelectedProducts() {\n    // @ts-ignore\n    this.products$ = this.productService.getSelectedProducts().pipe(map(data => {\n      return {\n        dataState: DataStateEnum.LOADED,\n        data\n      };\n    }), startWith({\n      dataState: DataStateEnum.LOADING\n    }), catchError(err => of({\n      dataState: DataStateEnum.ERROR,\n      errorMessage: err.message\n    })));\n  } // tslint:disable-next-line:typedef\n\n\n  onGetAvailableProducts() {\n    // @ts-ignore\n    this.products$ = this.productService.getAvailableProducts().pipe(map(data => {\n      return {\n        dataState: DataStateEnum.LOADED,\n        data\n      };\n    }), startWith({\n      dataState: DataStateEnum.LOADING\n    }), catchError(err => of({\n      dataState: DataStateEnum.ERROR,\n      errorMessage: err.message\n    })));\n  } // tslint:disable-next-line:typedef\n\n\n  onSearch(dataForm) {\n    // @ts-ignore\n    this.products$ = this.productService.getResearchProducts(dataForm.keyword).pipe(map(data => {\n      console.log(dataForm.keyword);\n      console.log(data);\n      return {\n        dataState: DataStateEnum.LOADED,\n        data\n      };\n    }), startWith({\n      dataState: DataStateEnum.LOADING\n    }), catchError(err => of({\n      dataState: DataStateEnum.ERROR,\n      errorMessage: err.message\n    })));\n  } // tslint:disable-next-line:typedef\n\n\n  onSelect(p) {\n    this.productService.selectOrUnSelectProduct(p).subscribe(data => {\n      p.selected = data.selected;\n    });\n  } // tslint:disable-next-line:typedef\n\n\n  onDelete(p) {\n    const valider = confirm('Etes vous sÃ»r de vouloir supprimer');\n\n    if (valider) {\n      this.productService.deleteProduct(p).subscribe(data => {\n        this.onGetAllProducts();\n      });\n    }\n  } // tslint:disable-next-line:typedef\n\n\n  onUpdate(p) {\n    this.productService.updateProduct(p).subscribe(data => {\n      this.onGetAllProducts();\n    });\n  } // tslint:disable-next-line:typedef\n\n\n  onNewProducts() {\n    this.router.navigateByUrl('/newProduct');\n  }\n\n};\nProductsComponent = __decorate([Component({\n  selector: 'app-products',\n  templateUrl: './products.component.html',\n  styleUrls: ['./products.component.css']\n})], ProductsComponent);\nexport { ProductsComponent };","map":null,"metadata":{},"sourceType":"module"}