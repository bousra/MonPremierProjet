{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Chart } from 'angular-highcharts';\nimport * as mapboxgl from 'mapbox-gl';\nlet DashboardprospectsComponent = class DashboardprospectsComponent {\n  constructor() {\n    this.style = 'mapbox://styles/mapbox/streets-v11';\n    this.char = new Chart({\n      chart: {\n        type: 'line',\n        height: '35%'\n      },\n      title: undefined,\n      credits: {\n        enabled: false\n      },\n      xAxis: {\n        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n      },\n      yAxis: {\n        title: undefined\n      },\n      plotOptions: {\n        line: {\n          dataLabels: {\n            enabled: false\n          } // enableMouseTracking: false\n\n        }\n      },\n      series: [{\n        showInLegend: false,\n        name: 'Tokyo',\n        type: 'line',\n        color: '#2295c7',\n        data: [7.0, 6.9, 9.5, 14.5, 18.4, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]\n      }, {\n        showInLegend: false,\n        name: 'London',\n        type: 'line',\n        color: '#38679b',\n        data: [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]\n      }]\n    });\n    this.secteurActivites = [{\n      name: 'secteur 1',\n      montant: 8\n    }, {\n      name: 'secteur 2',\n      montant: 10\n    }, {\n      name: 'secteur 3',\n      montant: 6\n    }, {\n      name: 'secteur 4',\n      montant: 2\n    }, {\n      name: 'secteur 5',\n      montant: 4\n    }, {\n      name: 'secteur 6',\n      montant: 5\n    }];\n    this.demandes = [{\n      numeroDemande: '000123',\n      nomClient: 'CGF Bourse',\n      date: '05 Aout - 12:21'\n    }, {\n      numeroDemande: '000124',\n      nomClient: 'HERTZ',\n      date: '05 Aout - 12:21'\n    }, {\n      numeroDemande: '000125',\n      nomClient: 'SENECARTOURS',\n      date: '05 Aout - 09:22'\n    }, {\n      numeroDemande: '000126',\n      nomClient: 'HERTZ',\n      date: '05 Aout - 10:47'\n    }];\n    this.charPie = new Chart({\n      chart: {\n        plotBackgroundColor: undefined,\n        plotBorderWidth: undefined,\n        plotShadow: false,\n        width: 300,\n        height: '80%',\n        type: 'pie'\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: undefined\n      },\n      tooltip: {\n        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'\n      },\n      accessibility: {\n        point: {\n          valueSuffix: '%'\n        }\n      },\n      plotOptions: {\n        pie: {\n          allowPointSelect: false,\n          cursor: 'pointer',\n          dataLabels: {\n            enabled: true,\n            format: '<b>{point.name}</b><br>{point.percentage:.1f} %',\n            distance: -50,\n            filter: {\n              property: 'percentage',\n              operator: '>',\n              value: 4\n            }\n          } // enableMouseTracking: false\n\n        }\n      },\n      series: [{\n        name: 'Share',\n        type: 'pie',\n        data: [{\n          name: 'secteur 1',\n          y: 61.41\n        }, {\n          name: 'secteur 2',\n          y: 11.84\n        }, {\n          name: 'secteur 3',\n          y: 10.85\n        }, {\n          name: 'seuteur 4',\n          y: 4.67\n        }, {\n          name: 'secteur 5',\n          y: 4.18\n        }, {\n          name: 'secteur 6',\n          y: 7.05\n        }]\n      }]\n    });\n    this.chartClientsBySector = new Chart({\n      chart: {\n        type: 'column',\n        height: '20%'\n      },\n      credits: {\n        enabled: false\n      },\n      title: {\n        text: undefined\n      },\n      xAxis: {\n        categories: ['L', 'M', 'M', 'J', 'V']\n      },\n      yAxis: {\n        visible: false,\n        min: 0,\n        title: {\n          text: undefined\n        }\n      },\n      tooltip: {\n        pointFormat: '<span style=\"color:{series.color}\">{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>',\n        shared: true\n      },\n      plotOptions: {\n        column: {\n          stacking: 'normal',\n          enableMouseTracking: false\n        }\n      },\n      series: [{\n        name: 'secteur 1',\n        type: 'column',\n        showInLegend: false,\n        data: [5, 3, 4, 7, 2]\n      }, {\n        name: 'secteur 2',\n        showInLegend: false,\n        type: 'column',\n        data: [2, 2, 3, 2, 1]\n      }, {\n        name: 'secteur 3',\n        showInLegend: false,\n        type: 'column',\n        data: [3, 4, 4, 2, 5]\n      }]\n    });\n  }\n\n  ngOnInit() {\n    navigator.geolocation.getCurrentPosition(position => {\n      const coordonnees = position.coords; // @ts-ignore\n\n      mapboxgl.accessToken = 'pk.eyJ1IjoiYm91c3JhIiwiYSI6ImNrdzF4em1pYmJrdjcydXF3ODd2YXFvZDkifQ.9-gmxEq3wtgDDMnx0VCgXw';\n      this.map = new mapboxgl.Map({\n        container: 'map',\n        style: this.style,\n        zoom: 13,\n        center: [coordonnees.longitude, coordonnees.latitude]\n      }); // Add map controls\n\n      this.map.addControl(new mapboxgl.NavigationControl());\n    });\n  } // tslint:disable-next-line:typedef\n\n\n  onButtonGroupClick($event) {\n    const clickedElement = $event.target || $event.srcElement;\n\n    if (clickedElement.nodeName === 'BUTTON') {\n      const isCertainButtonAlreadyActive = clickedElement.parentElement.querySelector('.active'); // if a Button already has Class: .active\n\n      if (isCertainButtonAlreadyActive) {\n        isCertainButtonAlreadyActive.classList.remove('active');\n      }\n\n      clickedElement.className += ' active';\n    }\n  } // tslint:disable-next-line:typedef\n\n\n  onButtonGroupClickclientsBySector($event) {\n    const clickedElement = $event.target || $event.srcElement;\n\n    if (clickedElement.nodeName === 'BUTTON') {\n      const isCertainButtonAlreadyActive = clickedElement.parentElement.querySelector('.active-clientsBySector'); // if a Button already has Class: .active\n\n      if (isCertainButtonAlreadyActive) {\n        isCertainButtonAlreadyActive.classList.remove('active-clientsBySector');\n      }\n\n      clickedElement.className += ' active-clientsBySector';\n    }\n  }\n\n};\nDashboardprospectsComponent = __decorate([Component({\n  selector: 'app-dashboardprospects',\n  templateUrl: './dashboardprospects.component.html',\n  styleUrls: ['./dashboardprospects.component.css']\n})], DashboardprospectsComponent);\nexport { DashboardprospectsComponent };","map":null,"metadata":{},"sourceType":"module"}